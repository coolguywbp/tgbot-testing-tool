from aiogram import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.exceptions import MessageNotModified
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from contextlib import suppress

from tgbot.services.repository import Repo

from tgbot.handlers.messages import messages

async def user_start(m: Message, repo: Repo):
    await repo.add_user(m.from_user.id)
    await m.reply("–ü—Ä–∏–≤–µ—Ç!")

async def show_help(m: Message):
    await m.answer(messages['instruction_message'])

# –ï–¥–∏–Ω–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
async def run_query(m: Message, repo: Repo):
    await m.answer(messages['query_instruction'].format(bot_name = await repo.get_bot_name(m.from_user.id)) + messages['query_examples'])

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
async def show_tests(m: Message, state: FSMContext, repo: Repo):
    await state.finish()
    bot_name = await repo.get_bot_name(m.from_user.id)
    tests = await repo.get_tests(bot_name)
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.insert(InlineKeyboardButton('‚ûï', callback_data='create_test'))
    if len(tests) == 0:
        await m.answer(messages['tests_list_empty'].format(bot_name=bot_name), reply_markup=keyboard)
    else:
        tests_list = []
        for test in tests:
            if test[2] == None:
                queries_len = 0
            else:
                queries_len = len(test[2].split('\n'))
            tests_list.append(f'<b>{str(test[0])}</b>({str(queries_len)})     /goto_{str(test[0])}')
        await m.answer(messages['tests_list_title'].format(bot_name=bot_name) + '\n'.join(tests_list), reply_markup=keyboard)

async def back_to_tests(q: CallbackQuery, state: FSMContext, repo: Repo):
    await state.finish()
    bot_name = await repo.get_bot_name(q.message.chat.id)
    tests = await repo.get_tests(bot_name)
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.insert(InlineKeyboardButton('‚ûï', callback_data='create_test'))
    if len(tests) == 0:
        response = messages['tests_list_empty'].format(bot_name=bot_name)
    else:
        tests_list = []
        for test in tests:
            if test[2] == None:
                queries_len = 0
            else:
                queries_len = len(test[2].split('\n'))
            tests_list.append(f'<b>{str(test[0])}</b>({str(queries_len)})     /goto_{str(test[0])}')
        response = messages['tests_list_title'].format(bot_name=bot_name) + '\n'.join(tests_list)
    with suppress(MessageNotModified):
        await q.message.edit_text(response)
        await q.message.edit_reply_markup(reply_markup = keyboard)

# –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ ‚ûï –ø—Ä–æ—Å–∏–º –Ω–∞–∑–≤–∞—Ç—å —Ç–µ—Å—Ç
async def name_test(q: CallbackQuery, repo: Repo):
    bot_name = await repo.get_bot_name(q.message.chat.id)
    with suppress(MessageNotModified):
        await q.message.edit_text(f'–ù–∞–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è {bot_name}:')
        await q.message.edit_reply_markup(reply_markup = InlineKeyboardMarkup())
    await NameTest.waiting_for_test_name.set()

# –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
async def create_test(m: Message, state: FSMContext, repo: Repo):
    await state.finish()

    test_name = m.text
    bot_name = await repo.get_bot_name(m.from_user.id)
    await repo.create_test(test_name, bot_name)

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.insert(InlineKeyboardButton('üîô', callback_data='back_to_tests'))

    await m.answer(messages['test_created'].format(test_name=test_name, bot_name = bot_name))
    await show_tests(m, state, repo)


# –ú–µ–Ω—é —Ç–µ—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–µ–º –ø–æ–π—Ç–∏ –Ω–∞–∑–∞–¥ –∫ —Å–º–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–º —Ç–µ—Å—Ç
async def edit_test(m: Message, state: FSMContext, repo: Repo):
    test_name = m.text[6:]
    test_name, bot_name, queries = await repo.get_test(test_name)

    await state.update_data(test_name=test_name)
    await EditTest.choosing_option.set()

    keyboard = InlineKeyboardMarkup(row_width=2)

    # –ï—Å–ª–∏ –µ—â—ë –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫, –æ–±–æ–≤–µ—â–∞–µ–º –æ–± —ç—Ç–æ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø—É –¥–æ–±–∞–≤–∏—Ç—å –∏ –Ω–∞–∑–∞–¥
    if queries == None:
        keyboard.insert(InlineKeyboardButton('üîô', callback_data='back_to_tests'))
        keyboard.insert(InlineKeyboardButton('‚ûï', callback_data='add_query'))
        await m.answer(messages['test_queries_list_empty'].format(test_name=test_name, bot_name=bot_name), reply_markup=keyboard)
    else:
        keyboard.insert(InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='run_test'))
        keyboard.insert(InlineKeyboardButton('‚ûï', callback_data='add_query'))
        keyboard.insert(InlineKeyboardButton('üîô', callback_data='back_to_tests'))
        keyboard.insert(InlineKeyboardButton('‚ûñ', callback_data='delete_query'))
        queries_list = [f'{i+1}) {query}' for i, query in enumerate(queries.split('\n'))]
        await m.answer(messages['test_queries_list_title'].format(test_name=test_name, bot_name=bot_name) +'\n'+'\n'.join(queries_list), reply_markup=keyboard)

async def add_query(q: CallbackQuery, repo: Repo):
    return
async def delete_query(m: Message, repo: Repo):
    return
async def run_test(m: Message, repo: Repo):
    return
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
def register_user(dp: Dispatcher):
    # –û–±—â–∏–µ
    dp.register_message_handler(user_start, commands=["start"], state="*")
    dp.register_message_handler(show_help, commands=["help"], state="*")
    dp.register_message_handler(run_query, commands=["query"], state="*")
    # –¢–µ—Å—Ç—ã
    dp.register_message_handler(show_tests, commands=["tests"], state="*")
    dp.register_callback_query_handler(back_to_tests, lambda c: c.data in ['back_to_tests'], state="*")
    dp.register_callback_query_handler(name_test, lambda c: c.data in ['create_test'], state="*")
    dp.register_message_handler(create_test, state=NameTest.waiting_for_test_name)
    dp.register_message_handler(edit_test, Text(startswith='/goto'), state="*")

# –°—Ç–µ–π—Ç—ã
class NameTest(StatesGroup):
    waiting_for_test_name = State()

class EditTest(StatesGroup):
    choosing_option = State()
    waiting_for_query = State()

class StackQuery(StatesGroup):
    waiting_for_query = State()
